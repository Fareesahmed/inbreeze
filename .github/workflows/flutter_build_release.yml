name: Flutter Build Release

on:
  push:
    branches:
      - main

jobs:
  android:
    name: Build APK
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      
    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: ~/.pub-cache
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pub-

    - name: Setup Flutter
      uses: subosito/flutter-action@v1
      with:
        flutter-version: '3.7'

    - name: Install Dependencies
      run: flutter pub get

    - name: Decode Keystore
      run: echo "${{ secrets.KEYSTORE }}" | base64 -d > release-key.jks
    
    - name: Build APK
      run: |
        flutter build apk --release \
          --dart-define=android-signing-keystore=release-key.jks \
          --dart-define=android-signing-key-alias=${{ secrets.KEY_ALIAS }} \
          --dart-define=android-signing-key-password=${{ secrets.KEY_PASSWORD }} \
          --dart-define=android-signing-keystore-password=${{ secrets.KEYSTORE_PASSWORD }}
    

    - name: Upload APK as Artifact
      uses: actions/upload-artifact@v2
      with:
        name: apk-artifact
        path: build/app/outputs/flutter-apk/app-release.apk

  ios:
    name: Build iOS
    runs-on: macos-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      
    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: ~/.pub-cache
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pub-
    - name: Setup Flutter
      uses: subosito/flutter-action@v1

    - name: Install Dependencies
      run: flutter pub get

    - name: Build iOS
      run: flutter build ios --release --no-codesign

    - name: Archive iOS app
      run: tar -czf build/ios/iphoneos/ios_unsigned.app.tar.gz build/ios/iphoneos/Runner.app
    
    - name: Upload iOS app as Artifact
      uses: actions/upload-artifact@v2
      with:
        name: ios-artifact
        path: build/ios/iphoneos/ios_unsigned.app.tar.gz
  
  linux:
    name: Build Linux
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      
    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: ~/.pub-cache
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pub-
      
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          clang \
          cmake \
          ninja-build \
          pkg-config \
          libgtk-3-dev \
          libunwind-dev \
          liborc-dev \
          liblzma-dev \
          gstreamer1.0-plugins-base \
          gstreamer1.0-libav \
          gstreamer1.0-plugins-good \
          gstreamer1.0-plugins-bad \
          gstreamer1.0-plugins-ugly \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          libpangocairo-1.0-0 \
          libpango-1.0-0 \
          libharfbuzz0b \
          libatk1.0-0 \
          libcairo-gobject2 \
          libcairo2
    - name: Setup Flutter
      uses: subosito/flutter-action@v1

    - name: Install Dependencies
      run: flutter pub get

    - name: Build Linux Executable
      run: |
        flutter build linux --release

    - name: Create AppImage
      run: |
        sudo apt-get update
        sudo apt-get install -y libfuse2
  
        # Download appimagetool from GitHub
        wget "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
        chmod a+x appimagetool-x86_64.AppImage
       
        # Make Appdir
        cp -r build/linux/x64/release/bundle InnerBreeze.AppDir

        # Add the AppRun script
        echo -e '#!/bin/bash\ncurrent_dir="$(dirname "$(readlink -f "$0")")"\n"$current_dir/inner_breeze"' > InnerBreeze.AppDir/AppRun
        chmod +x InnerBreeze.AppDir/AppRun

        cat > InnerBreeze.AppDir/InnerBreeze.desktop <<EOF
        [Desktop Entry]
        Type=Application
        Name=InnerBreeze
        Comment=Guided breathing meditation app to help you relax and focus.
        Exec=AppRun
        Icon=InnerBreeze
        Terminal=false
        Version=1.0
        Categories=Utility;Education;
        Keywords=Meditation;Breathing;Relaxation;Focus;Wellness;
        StartupNotify=true
        EOF

        cp InnerBreeze.AppDir/data/flutter_assets/assets/images/logo.png InnerBreeze.AppDir/InnerBreeze.png

        ./appimagetool-x86_64.AppImage InnerBreeze.AppDir
  
    - name: Archive Linux executable

      run: |
        mkdir -p organized_output/linux_x64/
        mv build/linux/x64/release/bundle/* organized_output/linux_x64/
        cp -r linux/extra organized_output/linux_x64/
    
        cd organized_output
    
        tar -czf ../InnerBreeze-x86_64.tar.gz linux_x64/
      
    - name: Upload Linux Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: linux-artifacts
        path: |
          InnerBreeze-x86_64.tar.gz 
          InnerBreeze-x86_64.AppImage   

  windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      
    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: ~/.pub-cache
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pub-
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v1
      with:
        flutter-version: '3.7'

    - name: Install Dependencies
      run: flutter pub get

    - name: Build Windows Executable
      run: flutter build windows --release
    
    - name: Reorganize Windows Directory
      run: |
        mkdir -p organized_output/windows/
        cp -r build/windows/runner/Release/* organized_output/windows/

    - name: Archive Windows executable
      run: 7z a build/windows_app.zip organized_output/windows/

    - name: Upload Windows executable as Artifact
      uses: actions/upload-artifact@v2
      with:
        name: windows-artifact
        path: build/windows_app.zip

  release:
    name: Release Builds
    needs: [android, ios, linux, windows] 
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
  
    - name: Download APK Artifact
      uses: actions/download-artifact@v2
      with:
        name: apk-artifact
        path: build/app/outputs/flutter-apk/
    
    - name: Download iOS Artifact
      uses: actions/download-artifact@v2
      with:
        name: ios-artifact
        path: build/ios/iphoneos/
    
    - name: Download Linux Artifacts
      uses: actions/download-artifact@v2
      with:
        name: linux-artifacts
        path: build/linux/
    
    - name: Download Windows Artifact
      uses: actions/download-artifact@v2
      with:
        name: windows-artifact
        path: build/windows/
    
    - name: Create Release and Upload Builds
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: "Development Build"
        files: |
          build/app/outputs/flutter-apk/app-release.apk
          build/ios/iphoneos/ios_unsigned.app.tar.gz
          build/linux/InnerBreeze-x86_64.tar.gz
          build/linux/InnerBreeze-x86_64.AppImage
          build/windows/windows_app.zip
          
        